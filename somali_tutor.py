# -*- coding: utf-8 -*-
"""Somali_Tutor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lGWFY0xUghmwvm9VLGYfePrYd06LMD1Y
"""

pip install requests

translator_api_key = 'YOUR_API_KEY'
translator_endpoint = 'YOUR_ENDPOINT'

#Implement the translation function
import requests, uuid, json

def translate_text(text, target_lang='so'):
    path = '/translate?api-version=3.0'
    params = '&to=' + target_lang
    constructed_url = translator_endpoint + path + params
    # Construction of Payload
    payload = [{'text': text,}]

    headers = {
        'Ocp-Apim-Subscription-Key': translator_api_key,
        'Ocp-Apim-Subscription-Region': 'westeurope',
        'Content-Type': 'application/json',
        'X-ClientTraceId': str(uuid.uuid4())
    }
    request = requests.post(constructed_url, headers=headers, json=payload)
    response = request.json()
    translated_text = response[0]['translations'][0]['text']
    return translated_text
    return response

english_text = input("Enter the English text to translate: ")
translated_text = translate_text(english_text, 'so')
print(translated_text)

speech_api_key = 'YOUR_API-KEY'
speech_endpoint = 'YOUR_ENDPOINT'

def text_to_speech_and_play(text, language='so-SO', voice_name='Voice_Name'):
    # Constructing SSML
    ssml = f'''
    <speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='{language}'>
        <voice name='{voice_name}'>{text}</voice>
    </speak>'''

    headers = {
        'Ocp-Apim-Subscription-Key': speech_api_key,
        'Content-Type': 'application/ssml+xml',
        'X-Microsoft-OutputFormat': 'audio-16khz-128kbitrate-mono-mp3'
    }

    response = requests.post(speech_endpoint, headers=headers, data=ssml)
    if response.status_code == 200:
      # Convert the binary data to an audio segment
        audio_data = io.BytesIO(response.content)
        audio_segment = AudioSegment.from_file(audio_data, format="mp3")
        # return response.content  # This is the binary audio data
        # Play the audio
        play(audio_segment)
        print("Playing the translated speech...")
    else:
        print(f"Error: {response.status_code}, {response.text}")
        return None

# Example usage
text_to_speech_result = text_to_speech("Hi. My name is Your Somali Tutor. I am developed by Marjan to help those who have difficulties understanding either Somali or English. I am test one.", language='en-US', voice_name='en-US-JennyNeural')
if text_to_speech_result:
    with open('output2.mp3', 'wb') as audio_file:
        audio_file.write(text_to_speech_result)
        print("Audio file written: output.mp3")  # Confirmation message
else:
      print("No result to write to file.")

from google.colab import files
files.download('output2.mp3')

import os
print("Current Working Directory:", os.getcwd())

def text_to_speech(text, language='so-SO', voice_name='Voice_Name'):
    # Constructing SSML
    ssml = f'''
    <speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='{language}'>
        <voice name='{voice_name}'>{text}</voice>
    </speak>'''

    headers = {
        'Ocp-Apim-Subscription-Key': speech_api_key,
        'Content-Type': 'application/ssml+xml',
        'X-Microsoft-OutputFormat': 'audio-16khz-128kbitrate-mono-mp3'
    }

    response = requests.post(speech_endpoint, headers=headers, data=ssml)
    if response.status_code == 200:
        return response.content  # This is the binary audio data
    else:
        print(f"Error: {response.status_code}, {response.text}")
        return None

def translate_and_speak(english_text):
    somali_text = translate_text(english_text, 'so')

    if somali_text is not None:
        print("Translated Text: ", somali_text)
        speech_audio = text_to_speech(somali_text, language='so-SO', voice_name='so-SO-UbaxNeural' )

        if speech_audio:
            with open('translated_speech.mp3', 'wb') as audio_file:
                audio_file.write(speech_audio)
            print("Somali speech synthesis complete. File saved as 'translated_speech.mp3'")
        else:
            print("Failed to convert text to speech.")
    else:
        print("Translation failed.")
english_input = input("Enter the English text to translate and speak: ")
translate_and_speak(english_input)

from google.colab import files
files.download('translated_speech.mp3')